////////////////////////////////////////////////////////////////////////////////
//
// Contract Check file PhoneNumber.otc
// Automatically generated by atostart on Fri Oct 26 10:32:21 2001
//
// Command line:  
//     C:\PROGRA~1\Rational\TESTRE~1\bin\intel\win32\atostart C:\Program
//     Files\Rational\TestRealTime\examples\BaseStation\src\PhoneNumber.cpp -opp
//      atl.opp -hpp atl.hpp -otcdir C:/Program
//     Files/Rational/TestRealTime/examples/BaseStation/BaseStation_Chris/ -o
//     C:\Program
//     Files\Rational\TestRealTime\examples\BaseStation\BaseStation_Chris\PhoneNumber.otd
//      -overwrite -include=relative -studio_log C:\Program
//     Files\Rational\TestRealTime\examples\BaseStation\BaseStation_Chris\intermediates_files.log
//
// Candidate classes for testing:
//     PhoneNumber (tested)
//  
////////////////////////////////////////////////////////////////////////////////   
  
////////////////////////////////////////////////////////////////////////////////
// Class PhoneNumber
 
CLASS PhoneNumber 
{
 
	// Invariants

	INVARIANT (! (isFull() & isEmpty()) ); 

	// Preconditions and postconditions

	// WRAP PhoneNumber(const PhoneNumber &phoneNum)
	// REQUIRE ()
	// ENSURE ()

	// WRAP PhoneNumber &operator=(const PhoneNumber &phoneNum)
	// REQUIRE ()
	// ENSURE ()

	// WRAP PhoneNumber &operator=(const char *phoneNum)
	// REQUIRE ()
	// ENSURE ()

	WRAP PhoneNumber(unsigned int length)
	ENSURE (stringLength>0)

	// WRAP void clearNumber()
	// REQUIRE ()
	// ENSURE ()

	// WRAP void removeDigit()
	// REQUIRE ()
	// ENSURE ()

	// WRAP int addDigit(char digit)
	// REQUIRE ()
	// ENSURE ()

	// WRAP int isFull()
	// REQUIRE ()
	// ENSURE ()

	// WRAP int isEmpty()
	// REQUIRE ()
	// ENSURE ()

	// WRAP int size()
	// REQUIRE ()
	// ENSURE ()

	// WRAP char operator[](int i)
	// REQUIRE ()
	// ENSURE ()

	// WRAP const char *theNumber()
	// REQUIRE ()
	// ENSURE ()

	// WRAP ~PhoneNumber()
	// REQUIRE ()
	// ENSURE ()

	// States

	/*
	STATE State1
	{
		( expression1 )
		( expression2 )
	}
	*/

	/*
	STATE State2
	{
		( expression3 )
		( expression4 )
	}
	*/

	// Transitions

	// TRANSITION State1 TO State2;

}

